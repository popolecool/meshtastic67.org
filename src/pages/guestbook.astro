---
import Layout from '../layouts/Layout.astro';
import Header from '../components/Header.astro';
import Footer from "../components/Footer.astro"
import Guestbook from "../components/Guestbook.astro"
interface Entry {
  id: number;
  name: string;
  message: string;
  timestamp: string; // Assuming timestamp is a string like 'YYYY-MM-DD HH:MM:SS'
}

let entries: Entry[] = [];
let error: string | null = null;

// This script runs on the server during the build or SSR.
// For initial data fetching, it's better to do it client-side for a dynamic guestbook
// unless this is a purely static site and entries are pre-rendered.
// Given the requirements (fetch and re-render), client-side fetching is primary.
---

<Layout title="Guestbook">
  <Header />
  <Guestbook />

  <script>
    const form = document.getElementById('guestbookForm') as HTMLFormElement;
    const formStatus = document.getElementById('formStatus');
    const entriesList = document.getElementById('entriesList');
    const loadingEntries = document.getElementById('loadingEntries');
    const errorEntries = document.getElementById('errorEntries');

    function displayFormStatus(message: string, isError: boolean) {
      if (!formStatus) return;
      formStatus.textContent = message;
      if (message) {
        formStatus.className = `mt-4 text-sm p-3 rounded-md ${isError ? 'text-red-700 bg-red-100 border border-red-400' : 'text-green-700 bg-green-100 border border-green-400'}`;
        formStatus.classList.remove('hidden');
      } else {
        formStatus.className = 'mt-4 text-sm hidden';
        formStatus.classList.add('hidden');
      }
    }

    function formatTimestamp(isoString: string): string {
      if (!isoString) return 'Just now';
      try {
        return new Date(isoString).toLocaleString();
      } catch (e) {
        return isoString; 
      }
    }

    async function fetchEntries() {
      if(loadingEntries) loadingEntries.classList.remove('hidden');
      if(errorEntries) errorEntries.classList.add('hidden');

      try {
        const response = await fetch('/api/entries');
        if (!response.ok) {
          const errorData = await response.json().catch(() => ({ error: 'Failed to fetch entries and parse error.' }));
          throw new Error(errorData.error || `HTTP error ${response.status}`);
        }
        const data = await response.json();

        if (data.success && Array.isArray(data.entries)) {
          renderEntries(data.entries);
        } else {
          throw new Error(data.error || 'Received invalid data from server.');
        }
      } catch (err) {
        console.error('Fetch error:', err);
        if(errorEntries) {
            errorEntries.textContent = `Error loading entries: ${err.message || 'Unknown error'}`;
            errorEntries.classList.remove('hidden');
        }
      } finally {
        if(loadingEntries) loadingEntries.classList.add('hidden');
      }
    }

    function renderEntries(entries: Array<{ id: number; name: string; message: string; timestamp: string }>) {
      if (!entriesList) return;

      const existingEntryElements = entriesList.querySelectorAll('.entry-item');
      existingEntryElements.forEach(el => el.remove());

      if(loadingEntries) loadingEntries.classList.add('hidden');
      if(errorEntries) errorEntries.classList.add('hidden');

      if (entries.length === 0) {
        const noEntriesMessage = document.createElement('p');
        noEntriesMessage.textContent = 'No entries yet. Be the first to sign!';
        noEntriesMessage.className = 'text-gray-500 entry-item text-center py-4';
        entriesList.appendChild(noEntriesMessage);
      } else {
        entries.forEach(entry => {
          const entryDiv = document.createElement('div');
          entryDiv.className = 'entry-item p-5 bg-white border border-gray-200 rounded-lg shadow-md';

          const header = document.createElement('div');
          header.className = 'flex justify-between items-center mb-2';

          const nameEl = document.createElement('strong');
          nameEl.className = 'text-lg font-semibold text-gray-900'; 
          nameEl.textContent = entry.name;

          const timeEl = document.createElement('span');
          timeEl.className = 'text-xs text-gray-500'; // Timestamp style is fine
          timeEl.textContent = formatTimestamp(entry.timestamp);

          header.appendChild(nameEl);
          header.appendChild(timeEl);

          const messageEl = document.createElement('p');
          messageEl.className = 'text-gray-700 whitespace-pre-wrap mt-1'; 
          messageEl.textContent = entry.message;

          entryDiv.appendChild(header);
          entryDiv.appendChild(messageEl);
          entriesList.appendChild(entryDiv);
        });
      }
    }

    form.addEventListener('submit', async (event) => {
      event.preventDefault();
      displayFormStatus('', false); 

      const nameInput = form.elements.namedItem('name') as HTMLInputElement;
      const emailInput = form.elements.namedItem('email') as HTMLInputElement;
      const messageInput = form.elements.namedItem('message') as HTMLTextAreaElement;

      const name = nameInput.value.trim();
      const email = emailInput.value.trim();
      const message = messageInput.value.trim();

      if (!name || !email || !message) {
        displayFormStatus('All fields are required.', true);
        return;
      }
      if (!email.includes('@') || !email.includes('.')) {
         displayFormStatus('Please enter a valid email address.', true);
         return;
      }

      try {
        const response = await fetch('/api/entries', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ name, email, message }),
        });

        const result = await response.json();

        if (response.status === 201 && result.success) {
          displayFormStatus('Entry added successfully!', false);
          form.reset();
          fetchEntries(); 
        } else {
          displayFormStatus(result.error || `Error: ${response.statusText}`, true);
        }
      } catch (err) {
        console.error('Submit error:', err);
        displayFormStatus('An unexpected error occurred. Please try again.', true);
      }
    });

    document.addEventListener('DOMContentLoaded', () => {
        fetchEntries();
    });
  </script>	
  <Footer />
</Layout>
